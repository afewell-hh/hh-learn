service: hedgehog-learn
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs20.x
  region: ${env:AWS_REGION, 'us-east-1'}
  stage: ${env:APP_STAGE, 'dev'}
  environment:
    HUBSPOT_PROJECT_ACCESS_TOKEN: ${env:HUBSPOT_PROJECT_ACCESS_TOKEN, ''}
    HUBSPOT_API_TOKEN: ${env:HUBSPOT_API_TOKEN, ''}
    HUBSPOT_PRIVATE_APP_TOKEN: ${env:HUBSPOT_PRIVATE_APP_TOKEN}
    HUBSPOT_ACCOUNT_ID: ${env:HUBSPOT_ACCOUNT_ID}
    ENABLE_CRM_PROGRESS: ${env:ENABLE_CRM_PROGRESS, 'false'}
    PROGRESS_BACKEND: ${env:PROGRESS_BACKEND, 'properties'}
  httpApi:
    cors:
      allowedOrigins:
        - 'https://hedgehog.cloud'
        - 'https://www.hedgehog.cloud'
      allowedHeaders:
        - Content-Type
        - Authorization
        - Origin
      allowedMethods:
        - GET
        - POST
        - OPTIONS
      allowCredentials: false

functions:
  api:
    handler: dist-lambda/src/api/lambda/index.handler
    events:
      - httpApi:
          path: /events/track
          method: POST
      - httpApi:
          path: /quiz/grade
          method: POST
      - httpApi:
          path: /progress/read
          method: GET

package:
  individually: true
  patterns:
    # Include ONLY compiled lambda code from dist-lambda
    - 'dist-lambda/src/api/**'
    - 'dist-lambda/src/shared/**'

    # Include only minimal runtime dependencies
    - 'node_modules/@hubspot/api-client/lib/**/*.js'
    - '!node_modules/@hubspot/api-client/**/*.d.ts'
    - '!node_modules/@hubspot/api-client/**/*.map'
    - 'node_modules/@hubspot/api-client/package.json'

    - 'node_modules/bottleneck/**/*.js'
    - '!node_modules/bottleneck/**/*.d.ts'
    - '!node_modules/bottleneck/**/*.map'
    - 'node_modules/bottleneck/package.json'

    - 'node_modules/es6-promise/dist/**/*.js'
    - '!node_modules/es6-promise/dist/**/*.map'
    - 'node_modules/es6-promise/package.json'

    - 'node_modules/form-data/**/*.js'
    - 'node_modules/form-data/package.json'

    - 'node_modules/lodash.get/**/*.js'
    - 'node_modules/lodash.get/package.json'

    - 'node_modules/lodash.merge/**/*.js'
    - 'node_modules/lodash.merge/package.json'

    - 'node_modules/node-fetch/**/*.js'
    - '!node_modules/node-fetch/**/*.d.ts'
    - 'node_modules/node-fetch/package.json'

    - 'node_modules/url-parse/dist/**/*.js'
    - '!node_modules/url-parse/dist/**/*.map'
    - 'node_modules/url-parse/package.json'

    - 'node_modules/zod/**/*.js'
    - '!node_modules/zod/**/*.d.ts'
    - '!node_modules/zod/**/*.d.cts'
    - '!node_modules/zod/**/*.d.mts'
    - '!node_modules/zod/**/*.map'
    - 'node_modules/zod/package.json'

    # Transitiv dependencies needed at runtime
    - 'node_modules/asynckit/**/*.js'
    - 'node_modules/asynckit/package.json'
    - 'node_modules/combined-stream/**/*.js'
    - 'node_modules/combined-stream/package.json'
    - 'node_modules/delayed-stream/**/*.js'
    - 'node_modules/delayed-stream/package.json'
    - 'node_modules/querystringify/**/*.js'
    - 'node_modules/querystringify/package.json'
    - 'node_modules/requires-port/**/*.js'
    - 'node_modules/requires-port/package.json'

    # Exclude everything else
    - '!dist/**'  # Exclude dist/ (only dist-lambda/ should be included)
    - '!src/**'
    - '!tests/**'
    - '!content/**'
    - '!docs/**'
    - '!reference/**'
    - '!hubdb-schemas/**'
    - '!scripts/**'
    - '!clean-x-hedgehog-templates/**'
    - '!verification-output/**'
    - '!aws/**'
    - '!infra/**'
    - '!.git/**'
    - '!.github/**'
    - '!.serverless/**'
    - '!.serverless-artifacts/**'
    - '!.playwright/**'
    - '!playwright-report/**'
    - '!test-results/**'
    - '!node_modules/.bin/**'
    - '!node_modules/.package-lock.json'
    - '!node_modules/@types/**'
    - '!node_modules/aws-sdk/**'
    - '!node_modules/esprima/**'
    - '!node_modules/gray-matter/**'
    - '!node_modules/marked/**'
    - '!**/*.test.*'
    - '!**/*.spec.*'
    - '!**/*.d.ts'
    - '!**/*.d.cts'
    - '!**/*.d.mts'
    - '!**/*.map'
    - '!**/*.ts'
    - '!**/*.md'
    - '!**/.travis.yml'
    - '!**/.babelrc*'
    - '!**/.env*'
    - '!**/LICENSE'
    - '!**/README*'
    - '!**/readme*'
    - '!**/CHANGELOG*'
    - '!**/bower.json'
    - '!*.zip'
    - '!package-lock.json'
    - '!.env'
    - '!.env.*'
    - '!.eslintrc.*'
    - '!.prettierrc*'
    - '!.hsignore'
    - '!eslint.config.js'
    - '!tsconfig*.json'
    - '!*.yml'
    - '!*.yaml'
    - '!*.html'
    - '!*.csv'
    - '!scratch.txt'

resources:
  Resources:
    # CloudWatch Logs - 30 day retention for MVP launch
    ApiLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: /aws/lambda/${self:service}-${sls:stage}-api
        RetentionInDays: 30

    # Lambda error alarm (sum of Errors in 1-minute periods)
    ApiLambdaErrorsAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: ${self:service}-${sls:stage}-lambda-errors
        Namespace: AWS/Lambda
        MetricName: Errors
        Dimensions:
          - Name: FunctionName
            Value: { Ref: ApiLambdaFunction }
        Statistic: Sum
        Period: 60
        EvaluationPeriods: 1
        Threshold: 5
        ComparisonOperator: GreaterThanOrEqualToThreshold
        TreatMissingData: notBreaching

    # Lambda throttles alarm (any throttle within 5 minutes)
    ApiLambdaThrottlesAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: ${self:service}-${sls:stage}-lambda-throttles
        Namespace: AWS/Lambda
        MetricName: Throttles
        Dimensions:
          - Name: FunctionName
            Value: { Ref: ApiLambdaFunction }
        Statistic: Sum
        Period: 60
        EvaluationPeriods: 5
        Threshold: 1
        ComparisonOperator: GreaterThanOrEqualToThreshold
        TreatMissingData: notBreaching

    # API Gateway 5XX errors (HTTP API)
    ApiGateway5xxAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: ${self:service}-${sls:stage}-httpapi-5xx
        Namespace: AWS/ApiGateway
        MetricName: 5XXError
        Dimensions:
          - Name: ApiId
            Value: { Ref: HttpApi }
          - Name: Stage
            Value: "$default"
        Statistic: Sum
        Period: 60
        EvaluationPeriods: 1
        Threshold: 5
        ComparisonOperator: GreaterThanOrEqualToThreshold
        TreatMissingData: notBreaching

    # API Gateway latency (average > 1s over 5 minutes)
    ApiGatewayLatencyAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: ${self:service}-${sls:stage}-httpapi-latency
        Namespace: AWS/ApiGateway
        MetricName: Latency
        Dimensions:
          - Name: ApiId
            Value: { Ref: HttpApi }
          - Name: Stage
            Value: "$default"
        Statistic: Average
        Period: 60
        EvaluationPeriods: 5
        Threshold: 1000
        ComparisonOperator: GreaterThanOrEqualToThreshold
        TreatMissingData: notBreaching

    # Composite alarm: page when any of the above are ALARM
    ApiErrorCompositeAlarm:
      Type: AWS::CloudWatch::CompositeAlarm
      DependsOn:
        - ApiLambdaErrorsAlarm
        - ApiLambdaThrottlesAlarm
        - ApiGateway5xxAlarm
        - ApiGatewayLatencyAlarm
      Properties:
        AlarmName: ${self:service}-${sls:stage}-api-red
        AlarmRule:
          Fn::Sub: "ALARM(arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:${self:service}-${sls:stage}-lambda-errors) OR ALARM(arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:${self:service}-${sls:stage}-httpapi-5xx) OR ALARM(arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:${self:service}-${sls:stage}-lambda-throttles) OR ALARM(arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:${self:service}-${sls:stage}-httpapi-latency)"
